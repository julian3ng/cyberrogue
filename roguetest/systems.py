from components import *
import tcod
class System(object):
    pass

class AISystem(System):
    """
    System to decide actions of anything with intelligence
    """
    def __init__(self, ai_table):
        self.ai_table = ai_table

    def update(self, input_value):
        """
        Get next move from each AI and stick it in its own message queue
        """

        # if human, input_value will have some effect
        # otherwise, input_value won't do anything
        ai_components = self.ai_table.all_components()

        # add message to each AI's queue detailing what to do next
        for c in ai_components:
            c.receive(c.next_action(input_value))
        
class MovementSystem(System):
    """
    System to resolve actions generated by AI
    """
    def __init__(self, ai_table, position_table):
        self.ai_table = ai_table
        self.position_table = position_table
        
    def update(self):
        # get all entities that have AIs and have positions
        moveable = (ai for pos in self.position_table.all_entities()
                    for ai in self.ai_table.all_entities()
                    if ai == pos)

        # get all corresponding components
        ai_pos = ((self.ai_table.component_of(entity_number),
                   self.position_table.component_of(entity_number))
                  for entity_number in moveable)

        for ai, pos in ai_pos:
            dx, dy = ai.first_message()
            pos.last_x, pos.last_y = pos.x, pos.y
            pos.x, pos.y = pos.x + dx, pos.y + dy



class RenderSystem(System):
    """
    Draw things that can be drawn
    (have a render component and a position component)
    """
    SCREEN_WIDTH = 80
    SCREEN_HEIGHT = 50
    def __init__(self, position_table, render_table):

        self.position_table = position_table
        self.render_table = render_table
        tcod.console_set_custom_font('fonts/arial10x10.png',
                                     tcod.FONT_TYPE_GREYSCALE |
                                     tcod.FONT_LAYOUT_TCOD)

        tcod.console_init_root(RenderSystem.SCREEN_WIDTH,
                               RenderSystem.SCREEN_HEIGHT,
                               'Roguelike test', False)
        
    def update(self):
        renderable = (render_entity for pos_entity in self.position_table.all_entities()
                      for render_entity in self.render_table.all_entities()
                      if pos_entity == render_entity)

        render_pos = ((self.render_table.component_of(entity_number),
                       self.position_table.component_of(entity_number))
                      for entity_number in renderable)

        tcod.console_set_default_foreground(0, tcod.white)
        for render, position in render_pos:
            tcod.console_put_char(0, position.x, position.y,
                                  render.char, tcod.BKGND_NONE)
            if (position.last_x is not None and position.last_y is not None):
                tcod.console_put_char(0, position.last_x, position.last_y,
                                      ' ', tcod.BKGND_NONE)
        
        tcod.console_flush()
                                  
        
            
if __name__ == "__main__":

    #setup
    ai_table = ComponentTable(AI)
    human_table = ComponentTable(HumanAI, parent=ai_table)
    computer_table = ComponentTable(ComputerAI, parent=ai_table)
    position_table = ComponentTable(Position)
    render_table = ComponentTable(Render)
    aisys = AISystem(ai_table)
    movesys = MovementSystem(ai_table, position_table)
    rendersys = RenderSystem(position_table, render_table)

    #add a human ai with a position and @
    human_table.add(0)
    position_table.add(0)
    render_table.add_component(0, Render('@'))
    # add a computer ai with a position    
    computer_table.add(1)
    position_table.add(1)
    render_table.add_component(1, Render('D'))

    # set input
    player_input = None
    while player_input != ord('q'):
        player_input = ord(input('player input: '))

        aisys.update(player_input)
        movesys.update()
        rendersys.update()

    
